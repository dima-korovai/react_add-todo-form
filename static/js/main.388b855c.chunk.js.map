{"version":3,"sources":["api/users.ts","services/user.ts","components/Form/Form.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","getUserById","userId","users","find","user","Form","onSubmit","useState","titleInput","setTitleInput","titleErrorMessage","setTitleErrorMessage","setUserId","hasUserIdError","setHasUserIdError","action","method","event","preventDefault","title","trim","length","completed","className","type","placeholder","value","onChange","val","target","test","onBlur","onKeyDown","key","required","map","UserInfo","href","TodoInfo","todo","cn","TodoList","todos","getNewUserId","Math","max","todosWithUsers","App","setTodos","newTodo","addTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.388b855c.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import users from '../api/users';\nimport { User } from '../types/User';\n\nexport function getUserById(userId: number): User | null {\n  const todowithUser = users.find(user => {\n    return user.id === userId;\n  });\n\n  return todowithUser || null;\n}\n","import { useState } from 'react';\nimport users from '../../api/users';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const Form: React.FC<Props> = ({ onSubmit }) => {\n  const [titleInput, setTitleInput] = useState('');\n  const [titleErrorMessage, setTitleErrorMessage] = useState('');\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const keyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Backspace') {\n      if (titleInput.length === 1) {\n        setTitleInput('');\n        setTitleErrorMessage('');\n      }\n    }\n  };\n\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n  function onlyLettersAndSpaces(val: any) {\n    return /^[A-Za-z0-9 _]*$/.test(val);\n  }\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!onlyLettersAndSpaces(event.target.value)) {\n      setTitleErrorMessage('*only letters, numbres and spaces are allowed');\n    } else {\n      setTitleInput(event.target.value);\n      setTitleErrorMessage('');\n    }\n  };\n\n  const handleUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  const handleOnSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const title = titleInput.trim();\n\n    if (!title) {\n      setTitleErrorMessage('Please enter a title');\n    } else if (title.length < 5) {\n      setTitleErrorMessage('Title should be more than 4 ch');\n    }\n\n    setHasUserIdError(!userId);\n\n    if (!title || title.length < 5 || !userId) {\n      return;\n    }\n\n    onSubmit({\n      title,\n      userId,\n      id: 0,\n      user: getUserById(userId),\n      completed: false,\n    });\n\n    setTitleInput('');\n    setUserId(0);\n    setTitleErrorMessage('');\n  };\n\n  const handleOnBlur = () => {\n    if (titleInput.length < 5) {\n      setTitleErrorMessage('Title should be more than 4 ch');\n    }\n  };\n\n  return (\n    <form\n      action=\"/api/users\"\n      method=\"POST\"\n      onSubmit={handleOnSubmit}\n    >\n      <div className=\"field\">\n        <label>\n          Title:\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={titleInput}\n            onChange={handleTitleChange}\n            onBlur={handleOnBlur}\n            onKeyDown={keyPressHandler}\n          />\n        </label>\n        {titleErrorMessage && (\n          <span className=\"error\">{titleErrorMessage}</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label>\n          User:\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            required\n            onChange={handleUserId}\n          >\n            <option value={0}>Choose a user</option>\n            {\n              users.map(user => (\n                <option\n                  key={user.id}\n                  value={+user.id}\n                >\n                  {user.name}\n                </option>\n              ))\n            }\n          </select>\n        </label>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    id,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        })}\n    >\n\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { Form } from './components/Form/Form';\nimport { TodoList } from './components/TodoList';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { getUserById } from './services/user';\n\nfunction getNewUserId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n\nconst todosWithUsers = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n})) as Todo[];\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosWithUsers);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewUserId(todos),\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <Form onSubmit={(todo: Todo) => {\n        addTodo(todo);\n      }}\n      />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}